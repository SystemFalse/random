/*
 * Copyright (C) 2024 SystemFalse.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package org.system_false.random.generator;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * This annotation configures randomization of fields, record components and method/constructor parameters.
 * <p>
 * The following parameters are used to configure randomization of primitive types:
 * <ul>
 *     <li>{@code default<Type>}: default value of primitive type. Example: {@code defaultInt = 5}.</li>
 *     <li>{@code <type>MinValue}: minimum value of primitive type. Example: {@code intMinValue = 0}.</li>
 *     <li>{@code <type>MaxValue}: maximum value of primitive type. Example: {@code intMaxValue = 10}.</li>
 *     <li>{@code <type>Values}: possible values of primitive type. Example: {@code intValues = {0, 1, 2}}.</li>
 * </ul>
 * </p>
 * <p>
 * The following parameters are used to configure randomization of string:
 * <ul>
 *     <li>{@code defaultString}: default value of string. Example: {@code defaultString = "none" }</li>
 *     <li>{@code stringMinLength}: minimum length of string</li>
 *     <li>{@code stringMaxLength}: maximum length of string</li>
 *     <li>{@code charMinValue}: minimum char value in string</li>
 *     <li>{@code charMaxValue}: maximum char value in string</li>
 *     <li>{@code charValues}: possible characters in string. Example: {@code charValues = {'a', 'b', 'c'}}</li>
 * </ul>
 * </p>
 * <p>
 * The following parameters are used to configure randomization of enums:
 * <ul>
 *     <li>{@code defaultEnum}: default value of enum. Example: {@code defaultEnum = "A"}</li>
 *     <li>{@code enumValues}: possible names of enum. Example: {@code enumValues = {"A", "B", "C"}}</li>
 * </ul>
 * </p>
 * <p>
 * The following parameters are used to configure randomization of arrays:
 * <ul>
 *     <li>{@code arrayMinSize}: minimum size of array</li>
 *     <li>{@code arrayMaxSize}: maximum size of array</li>
 * </ul>
 * </p>
 * <p>
 * The following parameters are used to configure randomization of lists, sets and maps:
 * <ul>
 *     <li>{@code containerMinSize}: minimum size of container</li>
 *     <li>{@code containerMaxSize}: maximum size of container</li>
 * </ul>
 * </p>
 * <p>
 * Parameter {@code objectDepth} describes the depth of the object to be generated. Simply, it specifies how many
 * nested objects will be generated by random. The default value is 3.
 * </p>
 * <p>
 * Parameter {@code objectGenerator} describes the generator that must be used for generating annotated object.
 * Default values is {@link ObjectGenerator}.
 * </p>
 * <p>
 * Parameter {@code random} shows whether annotated object should be randomized. If it is {@code false}, then
 * default values will be used despite {@code objectDepth} and {@code objectGenerator} parameters. Default value
 * is {@code true}.
 * </p>
 *
 * @see ObjectGenerator
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.FIELD, ElementType.RECORD_COMPONENT, ElementType.PARAMETER})
public @interface RandomValue {
    /**
     * Default value of boolean. Default is {@code false}.
     * @return the default boolean value
     */
    boolean defaultBoolean() default false;

    /**
     * Default value of byte. Default is {@code 0}.
     * @return the default byte value
     */
    byte defaultByte() default 0;

    /**
     * Minimal value of byte, must be less than or equal to {@link #byteMaxValue()}. This
     * value is ignored if {@link #byteValues()} is specified. Default is {@link Byte#MIN_VALUE}.
     * @return the minimal byte value
     */
    byte byteMinValue() default Byte.MIN_VALUE;

    /**
     * Maximal value of byte, must be greater than or equal to {@link #byteMinValue()}. This
     * value is ignored if {@link #byteValues()} is specified. Default is {@link Byte#MAX_VALUE}.
     * @return the maximal byte value
     */
    byte byteMaxValue() default Byte.MAX_VALUE;

    /**
     * Possible values of byte. If this value is specified, {@link #byteMinValue()} and
     * {@link #byteMaxValue()} are ignored.
     * @return the possible byte values
     */
    byte[] byteValues() default {};

    /**
     * Default value of char. Default is {@code '\0'}.
     * @return the default char value
     */
    char defaultChar() default '\0';

    /**
     * Minimal value of char, must be less than or equal to {@link #charMaxValue()}. This
     * value is ignored if {@link #charValues()} is specified. Default is {@link Character#MIN_VALUE}.
     * Default is {@link Character#MIN_VALUE}.
     * @return the minimal char value
     */
    char charMinValue() default Character.MIN_VALUE;

    /**
     * Maximal value of char, must be greater than or equal to {@link #charMinValue()}. This
     * value is ignored if {@link #charValues()} is specified. Default is {@link Character#MAX_VALUE}.
     * Default is {@link Character#MAX_VALUE}.
     * @return the maximal char value
     */
    char charMaxValue() default Character.MAX_VALUE;

    /**
     * Possible values of char. If this value is specified, {@link #charMinValue()} and
     * {@link #charMaxValue()} are ignored.
     * @return the possible char values
     */
    char[] charValues() default {};

    /**
     * Default value of short. Default is {@code 0}.
     * @return the default short value
     */
    short defaultShort() default 0;

    /**
     * Minimal value of short, must be less than or equal to {@link #shortMaxValue()}. This
     * value is ignored if {@link #shortValues()} is specified. Default is {@link Short#MIN_VALUE}.
     * @return the minimal short value
     */
    short shortMinValue() default Short.MIN_VALUE;

    /**
     * Maximal value of short, must be greater than or equal to {@link #shortMinValue()}. This
     * value is ignored if {@link #shortValues()} is specified. Default is {@link Short#MAX_VALUE}.
     * @return the maximal short value
     */
    short shortMaxValue() default Short.MAX_VALUE;

    /**
     * Possible values of short. If this value is specified, {@link #shortMinValue()} and
     * {@link #shortMaxValue()} are ignored.
     * @return the possible short values
     */
    short[] shortValues() default {};

    /**
     * Default value of int. Default is {@code 0}.
     * @return the default int value
     */
    int defaultInt() default 0;

    /**
     * Minimal value of int, must be less than or equal to {@link #intMaxValue()}. This
     * value is ignored if {@link #intValues()} is specified. Default is {@link Integer#MIN_VALUE}.
     * @return the minimal int value
     */
    int intMinValue() default Integer.MIN_VALUE;

    /**
     * Maximal value of int, must be greater than or equal to {@link #intMinValue()}. This
     * value is ignored if {@link #intValues()} is specified. Default is {@link Integer#MAX_VALUE}.
     * @return the maximal int value
     */
    int intMaxValue() default Integer.MAX_VALUE;

    /**
     * Possible values of int. If this value is specified, {@link #intMinValue()} and
     * {@link #intMaxValue()} are ignored.
     * @return the possible int values
     */
    int[] intValues() default {};

    /**
     * Default value of long. Default is {@code 0}.
     * @return the default long value
     */
    long defaultLong() default 0;

    /**
     * Minimal value of long, must be less than or equal to {@link #longMaxValue()}. This
     * value is ignored if {@link #longValues()} is specified. Default is {@link Long#MIN_VALUE}.
     * @return the minimal long value
     */
    long longMinValue() default Long.MIN_VALUE;

    /**
     * Maximal value of long, must be greater than or equal to {@link #longMinValue()}. This
     * value is ignored if {@link #longValues()} is specified. Default is {@link Long#MAX_VALUE}.
     * @return the maximal long value
     */
    long longMaxValue() default Long.MAX_VALUE;

    /**
     * Possible values of long. If this value is specified, {@link #longMinValue()} and
     * {@link #longMaxValue()} are ignored.
     * @return the possible long values
     */
    long[] longValues() default {};

    /**
     * Default value of float. Default is {@code 0}.
     * @return the default float value
     */
    float defaultFloat() default 0F;

    /**
     * Minimal value of float, must be less than or equal to {@link #floatMaxValue()}. This
     * value is ignored if {@link #floatValues()} is specified. Default is {@link 0}.
     * @return the minimal float value
     */
    float floatMinValue() default 0F;

    /**
     * Maximal value of float, must be greater than or equal to {@link #floatMinValue()}. This
     * value is ignored if {@link #floatValues()} is specified. Default is {@link 1}.
     * @return the maximal float value
     */
    float floatMaxValue() default 1F;

    /**
     * Possible values of float. If this value is specified, {@link #floatMinValue()} and
     * {@link #floatMaxValue()} are ignored.
     * @return the possible float values
     */
    float[] floatValues() default {};

    /**
     * Default value of double. Default is {@code 0}.
     * @return the default double value
     */
    double defaultDouble() default 0F;

    /**
     * Minimal value of double, must be less than or equal to {@link #doubleMaxValue()}. This
     * value is ignored if {@link #doubleValues()} is specified. Default is {@link 0}.
     * @return the minimal double value
     */
    double doubleMinValue() default 0F;

    /**
     * Maximal value of double, must be greater than or equal to {@link #doubleMinValue()}. This
     * value is ignored if {@link #doubleValues()} is specified. Default is {@link 1}.
     * @return the maximal double value
     */
    double doubleMaxValue() default 1F;

    /**
     * Possible values of double. If this value is specified, {@link #doubleMinValue()} and
     * {@link #doubleMaxValue()} are ignored.
     * @return the possible double values
     */
    double[] doubleValues() default {};

    /**
     * Default value of string. Default is {@code ""}.
     * @return the default string value
     */
    String defaultString() default "";

    /**
     * Minimal length of string, must be less than or equal to {@link #stringMaxLength()}. This
     * value is ignored if {@link #stringValues()} is specified. Default is {@link 1}.
     * @return the minimal string length
     */
    int stringMinLength() default 1;

    /**
     * Maximal length of string, must be greater than or equal to {@link #stringMinLength()}. This
     * value is ignored if {@link #stringValues()} is specified. Default is {@link 1}.
     * @return the maximal string length
     */
    int stringMaxLength() default 1;

    /**
     * Possible values of string. If this value is specified, {@link #stringMinLength()} and
     * {@link #stringMaxLength()} are ignored.
     * @return the possible string values
     */
    String[] stringValues() default {};

    /**
     * Default name of enum.
     * @return the default enum name
     */
    String defaultEnum() default "";

    /**
     * Possible names of enum.
     * @return the possible enum names
     */
    String[] enumValues() default {};

    /**
     * Minimal length of array. Default is {@code 1}.
     * @return the minimal array length
     */
    int arrayMinLength() default 1;

    /**
     * Maximal length of array. Default is {@code 1}.
     * @return the maximal array length
     */
    int arrayMaxLength() default 1;

    /**
     * Minimal size of container (list, set, map), must be less than or equal to
     * {@link #containerMaxSize()}. Default is {@code 1}.
     * @return the minimal container size
     */
    int containerMinSize() default 1;

    /**
     * Maximal size of container (list, set, map), must be greater than or equal to
     * {@link #containerMinSize()}. Default is {@code 1}.
     * @return the maximal container size
     */
    int containerMaxSize() default 1;

    /**
     * Count of nested objects to be generated.
     * @return the count of nested objects
     */
    int objectDepth() default 3;

    /**
     * Specified generator for annotated object.
     * @return the generator for annotated object
     */
    Class<?> objectGenerator() default ObjectGenerator.class;

    /**
     * Whether the annotated object should be randomly generated.
     * @return {@code true} if the annotated object should be randomly generated
     */
    boolean random() default true;
}
